{
	"info": {
		"_postman_id": "12345678-1234-5678-9012-123456789abc",
		"name": "ChatTask New API Collection",
		"description": "Updated ChatTask API collection with new Conversation and TaskGroup structure",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üîê Authentication",
			"item": [
				{
					"name": "1. Register User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Benzersiz kullanƒ±cƒ± adƒ± olu≈ütur",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 1000);",
									"const uniqueUsername = `User_${timestamp}_${randomNum}`;",
									"",
									"// Environment'a kaydet",
									"pm.environment.set('currentUsername', uniqueUsername);",
									"",
									"// Request body'yi g√ºncelle",
									"const requestBody = {",
									"    \"name\": uniqueUsername,",
									"    \"password\": \"password123\",",
									"    \"email\": `${uniqueUsername}@example.com`",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('Generated username:', uniqueUsername);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User registered successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const user = pm.response.json();",
									"    pm.environment.set('currentUserId', user.id);",
									"    console.log('User registered:', pm.environment.get('currentUsername'));",
									"    console.log('User ID:', user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"User_1234567890_123\",\n  \"password\": \"password123\",\n  \"email\": \"User_1234567890_123@example.com\"\n}"
						},
						"url": {
							"raw": "{{userBase}}/api/Users/register",
							"host": [
								"{{userBase}}"
							],
							"path": [
								"api",
								"Users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Environment'dan kullanƒ±cƒ± adƒ±nƒ± al",
									"const username = pm.environment.get('currentUsername');",
									"",
									"// Request body'yi g√ºncelle",
									"const requestBody = {",
									"    \"userName\": username,",
									"    \"password\": \"password123\"",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('Logging in with username:', username);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    console.log('Login successful, token saved');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userName\": \"User_1234567890_123\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{authBase}}/api/Auth/login",
							"host": [
								"{{authBase}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè¢ Workspace Management",
			"item": [
				{
					"name": "Create Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Workspace created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const workspace = pm.response.json();",
									"    pm.environment.set('workspaceId', workspace.id);",
									"    console.log('Workspace created:', workspace.name);",
									"    console.log('Workspace ID:', workspace.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Company\",\n  \"domain\": \"testcompany\"\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/workspaces",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"workspaces"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üí¨ Conversation Management",
			"item": [
				{
					"name": "Create Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Channel created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const channel = pm.response.json();",
									"    pm.environment.set('channelId', channel.id);",
									"    console.log('Channel created:', channel.name);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"general\",\n  \"description\": \"General discussion channel\",\n  \"topic\": \"Company-wide discussions\",\n  \"purpose\": 1,\n  \"isPrivate\": false,\n  \"autoAddNewMembers\": true,\n  \"createdById\": \"{{currentUserId}}\",\n  \"initialMemberIds\": [\"{{currentUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/channels",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Group created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const group = pm.response.json();",
									"    pm.environment.set('groupId', group.id);",
									"    console.log('Group created:', group.name);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Marketing Team\",\n  \"description\": \"Marketing department discussions\",\n  \"purpose\": 1,\n  \"isPrivate\": true,\n  \"expiresAt\": null,\n  \"createdById\": \"{{currentUserId}}\",\n  \"memberIds\": [\"{{currentUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/groups",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Direct Message",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Direct Message created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const dm = pm.response.json();",
									"    pm.environment.set('dmId', dm.id);",
									"    console.log('Direct Message created:', dm.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"{{currentUserId}}\",\n  \"{{currentUserId}}\"\n]"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/direct-messages",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"direct-messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Conversations",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Conversations by Type",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}?type=channel",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "channel"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìù Messaging",
			"item": [
				{
					"name": "Send Message to Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Message sent successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const message = pm.response.json();",
									"    pm.environment.set('lastMessageId', message.id);",
									"    console.log('Message sent:', message.content);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"conversationId\": \"{{channelId}}\",\n  \"senderId\": \"{{currentUserId}}\",\n  \"content\": \"Hello everyone! This is a test message.\",\n  \"threadId\": null\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/messages",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Messages from Channel",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/{{channelId}}/messages",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"{{channelId}}",
								"messages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìã Task Management",
			"item": [
				{
					"name": "Create Task Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Task Group created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const taskGroup = pm.response.json();",
									"    pm.environment.set('taskGroupId', taskGroup.id);",
									"    console.log('Task Group created:', taskGroup.name);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sprint 1 Tasks\",\n  \"description\": \"Tasks for the first sprint\",\n  \"createdById\": \"{{currentUserId}}\",\n  \"memberIds\": [\"{{currentUserId}}\"],\n  \"createConversation\": true\n}"
						},
						"url": {
							"raw": "{{taskBase}}/api/task/task-groups",
							"host": [
								"{{taskBase}}"
							],
							"path": [
								"api",
								"task",
								"task-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Task to Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Task assigned to group successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const task = pm.response.json();",
									"    pm.environment.set('taskId', task.id);",
									"    console.log('Task created:', task.title);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Implement User Authentication\",\n  \"description\": \"Create JWT-based authentication system\",\n  \"dueDate\": \"2024-12-31T23:59:59Z\",\n  \"priority\": 2,\n  \"specificMemberIds\": [\"{{currentUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{taskBase}}/api/task/task-groups/{{taskGroupId}}/assign-task",
							"host": [
								"{{taskBase}}"
							],
							"path": [
								"api",
								"task",
								"task-groups",
								"{{taskGroupId}}",
								"assign-task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Individual Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Individual task created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const task = pm.response.json();",
									"    pm.environment.set('individualTaskId', task.id);",
									"    console.log('Individual task created:', task.title);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"title\": \"Review Code Changes\",\n  \"description\": \"Review pull request #123\",\n  \"dueDate\": \"2024-12-25T23:59:59Z\",\n  \"status\": 1,\n  \"priority\": 3,\n  \"taskGroupId\": null,\n  \"assigneeIds\": [\"{{currentUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{taskBase}}/api/task",
							"host": [
								"{{taskBase}}"
							],
							"path": [
								"api",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Task to Multiple Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Task assigned to multiple users successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    console.log('Task assigned to multiple users');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"{{currentUserId}}\",\n  \"{{currentUserId}}\"\n]"
						},
						"url": {
							"raw": "{{taskBase}}/api/task/{{individualTaskId}}/assign",
							"host": [
								"{{taskBase}}"
							],
							"path": [
								"api",
								"task",
								"{{individualTaskId}}",
								"assign"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tasks",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{taskBase}}/api/task",
							"host": [
								"{{taskBase}}"
							],
							"path": [
								"api",
								"task"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Task Groups",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{taskBase}}/api/task/task-groups",
							"host": [
								"{{taskBase}}"
							],
							"path": [
								"api",
								"task",
								"task-groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tasks by User",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{taskBase}}/api/task/user/{{currentUserId}}",
							"host": [
								"{{taskBase}}"
							],
							"path": [
								"api",
								"task",
								"user",
								"{{currentUserId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üîÑ SignalR Hub Tests",
			"item": [
				{
					"name": "Join Conversation (WebSocket)",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/chatHub?conversationId={{channelId}}",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"chatHub"
							],
							"query": [
								{
									"key": "conversationId",
									"value": "{{channelId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Request to:', pm.request.url);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 2000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "userBase",
			"value": "https://localhost:7001",
			"type": "string"
		},
		{
			"key": "authBase",
			"value": "https://localhost:7002",
			"type": "string"
		},
		{
			"key": "chatBase",
			"value": "https://localhost:7003",
			"type": "string"
		},
		{
			"key": "taskBase",
			"value": "https://localhost:7004",
			"type": "string"
		}
	]
}
