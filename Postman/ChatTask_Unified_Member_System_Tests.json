{
	"info": {
		"_postman_id": "unified-member-system-2024",
		"name": "ChatTask Unified Member System Tests (Enhanced Unique Data)",
		"description": "Comprehensive API tests for ChatTask with unified member system, workspace management, conversation features, and enhanced unique data generation for every test run",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "unified-member-system-enhanced"
	},
	"item": [
		{
			"name": "üîê Authentication & User Management",
			"item": [
				{
					"name": "1. Register User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Enhanced unique data generation",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"const sessionId = pm.environment.get('sessionId') || Math.random().toString(36).substr(2, 9);",
									"",
									"// Generate unique identifiers",
									"const uniqueUsername = `User_${sessionId}_${timestamp}_${randomNum}`;",
									"const uniqueEmail = `${uniqueUsername}@test${randomNum}.com`;",
									"const uniquePassword = `Pass${randomNum}@${timestamp}`;",
									"",
									"// Save session ID if not exists",
									"if (!pm.environment.get('sessionId')) {",
									"    pm.environment.set('sessionId', sessionId);",
									"}",
									"",
									"// Save to environment",
									"pm.environment.set('currentUsername', uniqueUsername);",
									"pm.environment.set('currentEmail', uniqueEmail);",
									"pm.environment.set('currentPassword', uniquePassword);",
									"",
									"// Update request body",
									"const requestBody = {",
									"    \"name\": uniqueUsername,",
									"    \"email\": uniqueEmail,",
									"    \"password\": uniquePassword",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('=== ENHANCED UNIQUE DATA GENERATION ===');",
									"console.log('Session ID:', sessionId);",
									"console.log('Generated Username:', uniqueUsername);",
									"console.log('Generated Email:', uniqueEmail);",
									"console.log('Generated Password:', uniquePassword);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User registered successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const user = pm.response.json();",
									"    pm.environment.set('currentUserId', user.id);",
									"    console.log('User registered:', pm.environment.get('currentUsername'));",
									"    console.log('User ID:', user.id);",
									"});",
									"",
									"pm.test('User has required fields', function () {",
									"    const user = pm.response.json();",
									"    pm.expect(user).to.have.property('id');",
									"    pm.expect(user).to.have.property('name');",
									"    pm.expect(user).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"{{currentUsername}}\",\n  \"password\": \"{{currentPassword}}\",\n  \"email\": \"{{currentEmail}}\"\n}"
						},
						"url": {
							"raw": "{{userBase}}/api/Users/register",
							"host": [
								"{{userBase}}"
							],
							"path": [
								"api",
								"Users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "2. Login User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Get unique data from environment",
									"const username = pm.environment.get('currentUsername');",
									"const password = pm.environment.get('currentPassword');",
									"",
									"// Update request body",
									"const requestBody = {",
									"    \"userName\": username,",
									"    \"password\": password",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('üîê Logging in with unique credentials:');",
									"console.log('Username:', username);",
									"console.log('Password:', password);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Login successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const response = pm.response.json();",
									"    pm.environment.set('accessToken', response.accessToken);",
									"    console.log('Login successful, token saved');",
									"});",
									"",
									"pm.test('Response contains access token', function () {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.have.property('accessToken');",
									"    pm.expect(response.accessToken).to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userName\": \"{{currentUsername}}\",\n  \"password\": \"{{currentPassword}}\"\n}"
						},
						"url": {
							"raw": "{{authBase}}/api/Auth/login",
							"host": [
								"{{authBase}}"
							],
							"path": [
								"api",
								"Auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "3. Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get users successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const users = pm.response.json();",
									"    pm.expect(users).to.be.an('array');",
									"    console.log('Users retrieved:', users.length);",
									"    ",
									"    // Save first two users for later tests",
									"    if (users.length >= 1) {",
									"        pm.environment.set('userId1', users[0].id);",
									"        pm.environment.set('userId2', users.length > 1 ? users[1].id : users[0].id);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/users",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üè¢ Workspace Management",
			"item": [
				{
					"name": "Create Workspace",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique workspace data",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"const sessionId = pm.environment.get('sessionId');",
									"",
									"// Generate unique workspace identifiers",
									"const workspaceName = `Workspace_${sessionId}_${timestamp}_${randomNum}`;",
									"const workspaceDomain = `workspace${sessionId}${randomNum}`.toLowerCase();",
									"",
									"pm.environment.set('workspaceName', workspaceName);",
									"pm.environment.set('workspaceDomain', workspaceDomain);",
									"",
									"const requestBody = {",
									"    \"name\": workspaceName,",
									"    \"domain\": workspaceDomain",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('üè¢ Creating unique workspace:');",
									"console.log('Workspace Name:', workspaceName);",
									"console.log('Workspace Domain:', workspaceDomain);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Workspace created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const workspace = pm.response.json();",
									"    pm.environment.set('workspaceId', workspace.id);",
									"    console.log('Workspace created:', workspace.name);",
									"    console.log('Workspace ID:', workspace.id);",
									"});",
									"",
									"pm.test('Workspace has required fields', function () {",
									"    const workspace = pm.response.json();",
									"    pm.expect(workspace).to.have.property('id');",
									"    pm.expect(workspace).to.have.property('name');",
									"    pm.expect(workspace).to.have.property('domain');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Test Company\",\n  \"domain\": \"testcompany\"\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Workspaces",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get workspaces successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const workspaces = pm.response.json();",
									"    pm.expect(workspaces).to.be.an('array');",
									"    console.log('Workspaces retrieved:', workspaces.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Member to Workspace",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique member data",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"const sessionId = pm.environment.get('sessionId');",
									"",
									"// Generate unique member identifiers",
									"const memberRole = Math.floor(Math.random() * 5) + 1; // 1-5 (MemberRole enum)",
									"const memberNote = `Member added via test session ${sessionId} - ${timestamp}`;",
									"",
									"pm.environment.set('memberRole', memberRole);",
									"pm.environment.set('memberNote', memberNote);",
									"",
									"const requestBody = {",
									"    \"userId\": pm.environment.get('currentUserId'),",
									"    \"parentId\": pm.environment.get('workspaceId'),",
									"    \"role\": memberRole,",
									"    \"isActive\": true,",
									"    \"addedById\": pm.environment.get('currentUserId')",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('üë• Adding unique member to workspace:');",
									"console.log('Member Role:', memberRole);",
									"console.log('Member Note:', memberNote);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Member added to workspace successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const member = pm.response.json();",
									"    pm.environment.set('workspaceMemberId', member.id);",
									"    console.log('Member added to workspace:', member.id);",
									"});",
									"",
									"pm.test('Member has correct role', function () {",
									"    const member = pm.response.json();",
									"    pm.expect(member).to.have.property('role');",
									"    pm.expect(member.role).to.be.oneOf([1, 2, 3, 4, 5]); // MemberRole enum values",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId2}}\",\n  \"parentId\": \"{{workspaceId}}\",\n  \"role\": 3,\n  \"isActive\": true,\n  \"addedById\": \"{{currentUserId}}\"\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/members",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"members"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üí¨ Conversation Management",
			"item": [
				{
					"name": "Create Channel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique channel data",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"const sessionId = pm.environment.get('sessionId');",
									"",
									"// Generate unique channel identifiers",
									"const channelName = `channel_${sessionId}_${timestamp}_${randomNum}`;",
									"const channelDescription = `Unique channel description for ${channelName}`;",
									"const channelTopic = `Topic for ${channelName} - Session ${sessionId}`;",
									"",
									"pm.environment.set('channelName', channelName);",
									"pm.environment.set('channelDescription', channelDescription);",
									"pm.environment.set('channelTopic', channelTopic);",
									"",
									"const requestBody = {",
									"    \"name\": channelName,",
									"    \"description\": channelDescription,",
									"    \"type\": 1, // Channel",
									"    \"isPrivate\": false,",
									"    \"topic\": channelTopic,",
									"    \"channelPurpose\": 1, // General",
									"    \"autoAddNewMembers\": true,",
									"    \"createdById\": pm.environment.get('currentUserId'),",
									"    \"initialMemberIds\": [pm.environment.get('currentUserId')]",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('üí¨ Creating unique channel:');",
									"console.log('Channel Name:', channelName);",
									"console.log('Channel Description:', channelDescription);",
									"console.log('Channel Topic:', channelTopic);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Channel created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const channel = pm.response.json();",
									"    pm.environment.set('channelId', channel.id);",
									"    console.log('Channel created:', channel.name);",
									"    console.log('Channel ID:', channel.id);",
									"});",
									"",
									"pm.test('Channel has required fields', function () {",
									"    const channel = pm.response.json();",
									"    pm.expect(channel).to.have.property('id');",
									"    pm.expect(channel).to.have.property('name');",
									"    pm.expect(channel).to.have.property('type');",
									"    pm.expect(channel.type).to.equal(1); // Channel type",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"general\",\n  \"description\": \"General discussion channel\",\n  \"type\": 1,\n  \"isPrivate\": false,\n  \"topic\": \"Company-wide discussions\",\n  \"channelPurpose\": 1,\n  \"autoAddNewMembers\": true,\n  \"createdById\": \"{{currentUserId}}\",\n  \"initialMemberIds\": [\"{{currentUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/channels",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"channels"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Group",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique group data",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"const sessionId = pm.environment.get('sessionId');",
									"",
									"// Generate unique group identifiers",
									"const groupName = `group_${sessionId}_${timestamp}_${randomNum}`;",
									"const groupDescription = `Unique team discussion group for ${groupName}`;",
									"",
									"pm.environment.set('groupName', groupName);",
									"pm.environment.set('groupDescription', groupDescription);",
									"",
									"const requestBody = {",
									"    \"name\": groupName,",
									"    \"description\": groupDescription,",
									"    \"type\": 2, // Group",
									"    \"isPrivate\": true,",
									"    \"groupPurpose\": 1, // Team",
									"    \"expiresAt\": null,",
									"    \"createdById\": pm.environment.get('currentUserId'),",
									"    \"memberIds\": [pm.environment.get('currentUserId')]",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('üë• Creating unique group:');",
									"console.log('Group Name:', groupName);",
									"console.log('Group Description:', groupDescription);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Group created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const group = pm.response.json();",
									"    pm.environment.set('groupId', group.id);",
									"    console.log('Group created:', group.name);",
									"    console.log('Group ID:', group.id);",
									"});",
									"",
									"pm.test('Group has required fields', function () {",
									"    const group = pm.response.json();",
									"    pm.expect(group).to.have.property('id');",
									"    pm.expect(group).to.have.property('name');",
									"    pm.expect(group).to.have.property('type');",
									"    pm.expect(group.type).to.equal(2); // Group type",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Marketing Team\",\n  \"description\": \"Marketing department discussions\",\n  \"type\": 2,\n  \"isPrivate\": true,\n  \"groupPurpose\": 1,\n  \"expiresAt\": null,\n  \"createdById\": \"{{currentUserId}}\",\n  \"memberIds\": [\"{{currentUserId}}\"]\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/groups",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Direct Message",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique direct message data",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"const sessionId = pm.environment.get('sessionId');",
									"",
									"// Generate unique DM identifiers",
									"const dmName = `dm_${sessionId}_${timestamp}_${randomNum}`;",
									"const dmDescription = `Direct message conversation - ${dmName}`;",
									"",
									"pm.environment.set('dmName', dmName);",
									"pm.environment.set('dmDescription', dmDescription);",
									"",
									"const requestBody = {",
									"    \"name\": dmName,",
									"    \"description\": dmDescription,",
									"    \"type\": 3, // DirectMessage",
									"    \"isPrivate\": true,",
									"    \"createdById\": pm.environment.get('currentUserId'),",
									"    \"memberIds\": [pm.environment.get('currentUserId')]",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('üí¨ Creating unique direct message:');",
									"console.log('DM Name:', dmName);",
									"console.log('DM Description:', dmDescription);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Direct Message created successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const dm = pm.response.json();",
									"    pm.environment.set('dmId', dm.id);",
									"    console.log('Direct Message created:', dm.id);",
									"});",
									"",
									"pm.test('Direct Message has correct type', function () {",
									"    const dm = pm.response.json();",
									"    pm.expect(dm).to.have.property('type');",
									"    pm.expect(dm.type).to.equal(3); // DirectMessage type",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  \"{{currentUserId}}\",\n  \"{{userId2}}\"\n]"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/direct-messages",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"direct-messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Conversations in Workspace",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get conversations successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const conversations = pm.response.json();",
									"    pm.expect(conversations).to.be.an('array');",
									"    console.log('Conversations retrieved:', conversations.length);",
									"    ",
									"    // Verify we have the conversations we created",
									"    const channelExists = conversations.some(c => c.id === pm.environment.get('channelId'));",
									"    const groupExists = conversations.some(c => c.id === pm.environment.get('groupId'));",
									"    pm.expect(channelExists).to.be.true;",
									"    pm.expect(groupExists).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Conversations by Type (Channel)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get channels successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const conversations = pm.response.json();",
									"    pm.expect(conversations).to.be.an('array');",
									"    ",
									"    // All returned conversations should be channels",
									"    conversations.forEach(conv => {",
									"        pm.expect(conv.type).to.equal(1); // Channel type",
									"    });",
									"    ",
									"    console.log('Channels retrieved:', conversations.length);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}?type=channel",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}"
							],
							"query": [
								{
									"key": "type",
									"value": "channel"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üë• Member Management",
			"item": [
				{
					"name": "Add Member to Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Member added to channel successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const member = pm.response.json();",
									"    pm.environment.set('channelMemberId', member.id);",
									"    console.log('Member added to channel:', member.id);",
									"});",
									"",
									"pm.test('Member has correct properties', function () {",
									"    const member = pm.response.json();",
									"    pm.expect(member).to.have.property('id');",
									"    pm.expect(member).to.have.property('role');",
									"    pm.expect(member).to.have.property('isActive');",
									"    pm.expect(member.isActive).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId2}}\",\n  \"parentId\": \"{{channelId}}\",\n  \"role\": 3,\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/{{channelId}}/members",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"{{channelId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Member from Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Member removed from channel successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    console.log('Member removed from channel');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/{{channelId}}/members/{{userId2}}",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"{{channelId}}",
								"members",
								"{{userId2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üìù Messaging",
			"item": [
				{
					"name": "Send Message to Channel",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate unique message content",
									"const timestamp = Date.now();",
									"const randomNum = Math.floor(Math.random() * 10000);",
									"const sessionId = pm.environment.get('sessionId');",
									"",
									"// Generate unique message identifiers",
									"const messageContent = `Unique test message from session ${sessionId} - ${timestamp} - ${randomNum}`;",
									"const messageType = Math.floor(Math.random() * 3) + 1; // 1-3 (text, image, file)",
									"",
									"pm.environment.set('messageContent', messageContent);",
									"pm.environment.set('messageType', messageType);",
									"",
									"const requestBody = {",
									"    \"conversationId\": pm.environment.get('channelId'),",
									"    \"senderId\": pm.environment.get('currentUserId'),",
									"    \"content\": messageContent,",
									"    \"threadId\": null",
									"};",
									"",
									"pm.request.body.raw = JSON.stringify(requestBody, null, 2);",
									"console.log('üí¨ Sending unique message to channel:');",
									"console.log('Message Content:', messageContent);",
									"console.log('Message Type:', messageType);",
									"console.log('Channel ID:', pm.environment.get('channelId'));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Message sent successfully', function () {",
									"    pm.response.to.have.status(200);",
									"    const message = pm.response.json();",
									"    pm.environment.set('lastMessageId', message.id);",
									"    console.log('Message sent, ID:', message.id);",
									"});",
									"",
									"pm.test('Message has required fields', function () {",
									"    const message = pm.response.json();",
									"    pm.expect(message).to.have.property('id');",
									"    pm.expect(message).to.have.property('content');",
									"    pm.expect(message).to.have.property('senderId');",
									"    pm.expect(message).to.have.property('conversationId');",
									"    pm.expect(message.content).to.equal(pm.environment.get('messageContent'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"conversationId\": \"{{channelId}}\",\n  \"senderId\": \"{{currentUserId}}\",\n  \"content\": \"Hello everyone! This is a test message.\",\n  \"threadId\": null\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/messages",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"messages"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Messages from Channel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get messages successful', function () {",
									"    pm.response.to.have.status(200);",
									"    const messages = pm.response.json();",
									"    pm.expect(messages).to.be.an('array');",
									"    console.log('Messages retrieved:', messages.length);",
									"    ",
									"    // Verify our test message is in the list",
									"    const testMessage = messages.find(m => m.id === pm.environment.get('lastMessageId'));",
									"    pm.expect(testMessage).to.not.be.undefined;",
									"    pm.expect(testMessage.content).to.equal(pm.environment.get('messageContent'));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"url": {
							"raw": "{{chatBase}}/api/conversation/{{channelId}}/messages",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"{{channelId}}",
								"messages"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "üß™ Advanced Tests",
			"item": [
				{
					"name": "Test Member ID Hashing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Member ID is properly hashed', function () {",
									"    pm.response.to.have.status(200);",
									"    const member = pm.response.json();",
									"    ",
									"    // Verify the member ID is a valid GUID",
									"    const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;",
									"    pm.expect(member.id).to.match(guidRegex);",
									"    ",
									"    console.log('Member ID (hashed):', member.id);",
									"    console.log('User ID:', member.userId);",
									"    console.log('Parent ID:', member.parentId);",
									"    console.log('Role:', member.role);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId1}}\",\n  \"parentId\": \"{{workspaceId}}\",\n  \"role\": 2,\n  \"isActive\": true,\n  \"addedById\": \"{{currentUserId}}\"\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/workspaces/{{workspaceId}}/members",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"workspaces",
								"{{workspaceId}}",
								"members"
							]
						}
					},
					"response": []
				},
				{
					"name": "Test Multiple Member Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Different member roles work correctly', function () {",
									"    pm.response.to.have.status(200);",
									"    const member = pm.response.json();",
									"    ",
									"    // Test different roles",
									"    const validRoles = [1, 2, 3, 4, 5]; // Owner, Admin, Member, Guest, Observer",
									"    pm.expect(member.role).to.be.oneOf(validRoles);",
									"    ",
									"    console.log('Member role:', member.role);",
									"    console.log('Role name:', ['Owner', 'Admin', 'Member', 'Guest', 'Observer'][member.role - 1]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{accessToken}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"{{userId2}}\",\n  \"parentId\": \"{{groupId}}\",\n  \"role\": 5,\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{chatBase}}/api/conversation/{{groupId}}/members",
							"host": [
								"{{chatBase}}"
							],
							"path": [
								"api",
								"conversation",
								"{{groupId}}",
								"members"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script for enhanced unique data",
					"console.log('üöÄ === ENHANCED UNIQUE DATA TEST RUN ===');",
					"console.log('Request to:', pm.request.url);",
					"console.log('Method:', pm.request.method);",
					"",
					"// Initialize session ID if not exists",
					"if (!pm.environment.get('sessionId')) {",
					"    const sessionId = Math.random().toString(36).substr(2, 9);",
					"    pm.environment.set('sessionId', sessionId);",
					"    console.log('üÜî New Session ID generated:', sessionId);",
					"} else {",
					"    console.log('üÜî Using existing Session ID:', pm.environment.get('sessionId'));",
					"}",
					"",
					"// Log environment variables for debugging",
					"if (pm.environment.get('currentUserId')) {",
					"    console.log('üë§ Current User ID:', pm.environment.get('currentUserId'));",
					"}",
					"if (pm.environment.get('workspaceId')) {",
					"    console.log('üè¢ Workspace ID:', pm.environment.get('workspaceId'));",
					"}",
					"if (pm.environment.get('channelId')) {",
					"    console.log('üí¨ Channel ID:', pm.environment.get('channelId'));",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script with enhanced logging",
					"pm.test('Response time is acceptable', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has proper content type', function () {",
					"    if (pm.response.headers.get('Content-Type')) {",
					"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"    }",
					"});",
					"",
					"// Enhanced error logging",
					"if (pm.response.code >= 400) {",
					"    console.log('‚ùå Error Response:', pm.response.text());",
					"} else {",
					"    console.log('‚úÖ Success Response Code:', pm.response.code);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "userBase",
			"value": "http://localhost:5001",
			"type": "string"
		},
		{
			"key": "authBase",
			"value": "http://localhost:5003",
			"type": "string"
		},
		{
			"key": "chatBase",
			"value": "http://localhost:5002",
			"type": "string"
		},
		{
			"key": "taskBase",
			"value": "http://localhost:5004",
			"type": "string"
		}
	]
}
