// <auto-generated />
using System;
using ChatTask.ChatService.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChatTask.ChatService.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    [Migration("20250910133810_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId", "Name");

                    b.ToTable("Conversations");

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WorkspaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.HasIndex("WorkspaceId");

                    b.HasIndex("UserId", "ParentId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThreadId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SenderId");

                    b.HasIndex("ConversationId", "CreatedAt");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid?>("TaskGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("TaskGroupId");

                    b.ToTable("ProjectTask");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.TaskAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskAssignment");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Workspace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Domain")
                        .IsUnique();

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.Channel", b =>
                {
                    b.HasBaseType("ChatTask.Shared.Models.Conversations.Conversation");

                    b.Property<bool>("AutoAddNewMembers")
                        .HasColumnType("bit");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<string>("Topic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WorkspaceId1")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WorkspaceId1");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.DirectMessage", b =>
                {
                    b.HasBaseType("ChatTask.Shared.Models.Conversations.Conversation");

                    b.Property<Guid>("WorkspaceId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WorkspaceId2");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.Group", b =>
                {
                    b.HasBaseType("ChatTask.Shared.Models.Conversations.Conversation");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Purpose")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkspaceId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WorkspaceId2");

                    b.ToTable("Conversations", t =>
                        {
                            t.Property("Purpose")
                                .HasColumnName("Group_Purpose");

                            t.Property("WorkspaceId2")
                                .HasColumnName("Group_WorkspaceId2");
                        });

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.TaskGroup", b =>
                {
                    b.HasBaseType("ChatTask.Shared.Models.Conversations.Conversation");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkspaceId2")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("WorkspaceId2");

                    b.ToTable("Conversations", t =>
                        {
                            t.Property("WorkspaceId2")
                                .HasColumnName("TaskGroup_WorkspaceId2");
                        });

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.Conversation", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Workspace", null)
                        .WithMany("Conversations")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Member", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Conversations.Conversation", null)
                        .WithMany("ConversationMembers")
                        .HasForeignKey("ConversationId");

                    b.HasOne("ChatTask.Shared.Models.Conversations.Conversation", "Conversation")
                        .WithMany("Members")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChatTask.Shared.Models.Workspace", "Workspace")
                        .WithMany("Members")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ChatTask.Shared.Models.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatTask.Shared.Models.Workspace", null)
                        .WithMany("WorkspaceMembers")
                        .HasForeignKey("WorkspaceId");

                    b.Navigation("Conversation");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Message", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Conversations.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatTask.Shared.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.ProjectTask", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Conversations.TaskGroup", "TaskGroup")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskGroupId");

                    b.Navigation("TaskGroup");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.TaskAssignment", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.ProjectTask", "Task")
                        .WithMany("Assignments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChatTask.Shared.Models.User", "User")
                        .WithMany("TaskAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.Channel", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Workspace", null)
                        .WithMany("Channels")
                        .HasForeignKey("WorkspaceId1");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.DirectMessage", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Workspace", null)
                        .WithMany("DirectMessages")
                        .HasForeignKey("WorkspaceId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.Group", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Workspace", null)
                        .WithMany("Groups")
                        .HasForeignKey("WorkspaceId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.TaskGroup", b =>
                {
                    b.HasOne("ChatTask.Shared.Models.Workspace", null)
                        .WithMany("TaskGroups")
                        .HasForeignKey("WorkspaceId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.Conversation", b =>
                {
                    b.Navigation("ConversationMembers");

                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.ProjectTask", b =>
                {
                    b.Navigation("Assignments");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.User", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("TaskAssignments");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Workspace", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("Conversations");

                    b.Navigation("DirectMessages");

                    b.Navigation("Groups");

                    b.Navigation("Members");

                    b.Navigation("TaskGroups");

                    b.Navigation("WorkspaceMembers");
                });

            modelBuilder.Entity("ChatTask.Shared.Models.Conversations.TaskGroup", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
